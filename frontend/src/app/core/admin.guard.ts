import { CanActivateFn, Router } from '@angular/router';
import { inject } from '@angular/core';
import { AuthService } from './auth.service';

/**
 * Guard admin simplifi√© et robuste
 *
 * 1. V√©rifie si l'utilisateur a un token local
 * 2. V√©rifie que l'utilisateur a le r√¥le ADMINISTRATEUR
 * 3. Si non authentifi√© ou r√¥le insuffisant, redirige vers /admin/login
 *
 * Note : La validation du token avec le backend se fait via l'intercepteur HTTP
 * qui g√®re automatiquement les tokens expir√©s (401) et d√©connecte l'utilisateur
 */
export const adminGuard: CanActivateFn = (route, state) => {
  const auth = inject(AuthService);
  const router = inject(Router);

  console.log('üîê [ADMIN GUARD] V√©rification acc√®s:', state.url);

  // √âtape 1 : V√©rifier si l'utilisateur est connect√© (token pr√©sent)
  if (!auth.isLoggedIn()) {
    console.log('‚ùå [ADMIN GUARD] Pas de token ‚Üí /admin/login');
    return router.createUrlTree(['/admin/login'], { queryParams: { returnUrl: state.url } });
  }

  // √âtape 2 : V√©rifier le r√¥le ADMINISTRATEUR
  const role = localStorage.getItem('role');
  const user = auth.user();

  console.log('üîç [ADMIN GUARD] R√¥le:', role, '| User role:', user?.role);

  if (role !== 'ADMINISTRATEUR' && user?.role !== 'ADMINISTRATEUR') {
    console.log('‚ùå [ADMIN GUARD] R√¥le insuffisant ‚Üí /admin/login');
    return router.createUrlTree(['/admin/login']);
  }

  console.log('‚úÖ [ADMIN GUARD] Acc√®s autoris√© pour administrateur');
  return true;
};
