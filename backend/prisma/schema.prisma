// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Type d'organisation (ONG, PME, PMI, Startup, etc.)
model TypeOrganisation {
  id             String           @id @default(uuid())
  nom            String           @unique
  organisations  Organisation[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

// Utilisateur FPBG (agents administrateurs)
model User {
  id              String          @id @default(uuid())
  username        String?         @unique
  email           String          @unique
  password        String
  firstName       String?
  lastName        String?
  numTel          String?
  postalAddress   String?
  physicalAddress String?
  userType        String?         // Type d'utilisateur (admin, agent, organisation)
  otp             String?
  otpExpiry       DateTime?
  organisation    Organisation?   // Relation: Un user peut avoir une organisation
  collaborateurs  Collaborateur[] // Relation: Un user peut créer plusieurs collaborateurs
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

// Organisation (ONG, entreprises, etc.)
model Organisation {
  id                        String             @id @default(uuid())
  userId                    String?            @unique  // Lien vers le User propriétaire (optional for migration)
  user                      User?              @relation(fields: [userId], references: [id], onDelete: Cascade)
  name                      String?
  username                  String?            @unique
  email                     String             @unique
  password                  String
  contact                   String?
  numTel                    String?
  postalAddress             String?
  physicalAddress           String?
  type                      String?
  grantType                 String?            // Type de subvention demandée (Petite/Moyenne)
  usernamePersonneContacter String?
  typeOrganisationId        String?
  typeOrganisation          TypeOrganisation?  @relation(fields: [typeOrganisationId], references: [id])
  projets                   Projet[]
  otp                       String?
  otpExpiry                 DateTime?
  createdAt                 DateTime           @default(now())
  updatedAt                 DateTime           @updatedAt
}

// Collaborateur d'un projet (membre de l'équipe projet)
model Collaborateur {
  id                String         @id @default(uuid())

  // Relation avec l'utilisateur qui a créé ce collaborateur
  userId            String
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relation avec le projet (plusieurs collaborateurs peuvent travailler sur le même projet)
  projetId          String
  projet            Projet         @relation(fields: [projetId], references: [id], onDelete: Cascade)

  // Informations du collaborateur
  nom               String
  prenom            String
  email             String
  telephone         String?
  role              String?        // Rôle dans le projet (Coordinateur, Expert, Chargé de mission, etc.)

  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

// Projet soumis par les organisations
model Projet {
  id                String         @id @default(uuid())

  // Relation avec l'organisme
  organisationId    String?
  organisation      Organisation?  @relation(fields: [organisationId], references: [id])

  // === ÉTAPE 1 : Proposition du projet ===
  title             String?        // Titre du projet
  domains           String[]       @default([]) // Domaines d'intervention
  location          String?        @db.Text  // Lieu d'exécution
  targetGroup       String?        @db.Text  // Groupe cible
  contextJustification String?     @db.Text  // Contexte & justification

  // === ÉTAPE 2 : Objectifs & résultats ===
  objectives        Json?                     // Objectifs
  expectedResults   String?        @db.Text  // Résultats attendus
  durationMonths    Int?           // Durée en mois

  // === ÉTAPE 3 : Activités & calendrier ===
  activitiesStartDate   DateTime?  // Date de début
  activitiesEndDate     DateTime?  // Date de fin
  activitiesSummary     String?    @db.Text  // Résumé des activités
  activities            Json?      // Array d'activités [{title, start, end, summary, subs:[{label,summary}]}]

  // === ÉTAPE 4 : Risques ===
  risks                 Json?      // Array de risques [{description, mitigation}]

  // === ÉTAPE 5 : Budget ===
  usdRate               Int?       @default(655) // Taux de change FCFA/USD
  budgetActivities      Json?      // Budget par activité [{activityIndex, lines:[{label,cfa,fpbgPct,cofinPct}]}]
  indirectOverheads     Int?       @default(0) // Frais indirects (plafond 10%)

  // === ÉTAPE 6 : État & financement ===
  projectStage      String?        // CONCEPTION, DEMARRAGE, AVANCE, PHASE_FINALE
  hasFunding        Boolean?       @default(false)
  fundingDetails    String?        @db.Text
  honorAccepted     Boolean?       @default(false) // Engagement sur l'honneur

  // === ÉTAPE 7 : Durabilité ===
  sustainability    String?        @db.Text  // Durabilité
  replicability     String?        @db.Text  // Potentiel de réplication

  // === ÉTAPE 8 : Annexes (fichiers) ===
  lettreMotivation  String?        // Lettre de motivation
  statutsReglement  String?        // Statuts & règlement
  ficheCircuit      String?        // Fiche circuit (PME/PMI/Startup)
  cote              String?        // CÔTE
  agrement          String?        // Agrément / Récépissé
  cv                String[]       @default([]) // CV (porteur & responsables)
  budgetDetaille    String?        // Budget détaillé
  chronogramme      String?        // Chronogramme
  cartographie      String?        // Cartographie (optionnel)
  lettreSoutien     String?        // Lettre de soutien (optionnel)

  // === Champs hérités (compatibilité) ===
  actPrin           String?        @db.Text  // Activités principales (ancien)
  dateLimPro        DateTime?      // Date limite estimée (ancien)
  rAtt              String?        @db.Text  // Résultat attendu (ancien)
  objP              String?        @db.Text  // Objectif du projet (ancien)
  conjP             String?        @db.Text  // Contexte & justification (ancien)
  lexGcp            String?        @db.Text  // Lieu d'exécution & groupe cible (ancien)
  poRistEnvSoPo     String?        @db.Text  // Potentiel risque (ancien)
  dPRep             String?        @db.Text  // Durabilité (ancien)
  conseilPr         String?        @db.Text  // Conseil pratique (ancien)
  lM                String?        // Lettre de motivation (ancien)
  stR               String?        // Statuts et règlement (ancien)
  ficheC            String?        // Fiche circuit (ancien)
  rib               String?        // RIB (ancien)
  cA                String?        // Copie de l'agrément (ancien)
  budgetD           String?        // Budget d'estimation (ancien)
  che               String?        // Chronogramme d'exécution (ancien)
  cartography       String?        // Cartographie (ancien)
  lP                String?        // Lettre de soutien/partenariat (ancien)

  // === État du projet ===
  status            String         @default("BROUILLON") // BROUILLON, SOUMIS, EN_REVUE, ACCEPTE, REFUSE
  stade             String?        // Stade du projet (ancien - à migrer vers status)
  funding           String?        // Financement (ancien)

  // === Collaborateurs ===
  collaborateurs    Collaborateur[]

  // === Métadonnées ===
  dateCreation      DateTime       @default(now())
  submittedAt       DateTime?      // Date de soumission
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

// Appel à Projets (AAP)
model AppelAProjet {
  id                        String                   @id @default(uuid())
  code                      String                   @unique
  titre                     String
  resume                    String                   @db.Text
  contexte                  String                   @db.Text
  objectif                  String                   @db.Text
  contactEmail              String
  geographicEligibility     String[]                 @default([])
  eligibleOrganisations     String[]                 @default([])
  eligibleActivities        String[]                 @default([])
  cofinancement             String?                  @db.Text
  annexes                   String[]                 @default([])
  launchDate                DateTime
  cover                     String?                  // URL de l'image de couverture
  tags                      String[]                 @default([])
  isActive                  Boolean                  @default(true)
  createdAt                 DateTime                 @default(now())
  updatedAt                 DateTime                 @updatedAt

  // Relations
  subventions               Subvention[]
  thematiques               Thematique[]
}

// Subvention (Petite ou Moyenne)
model Subvention {
  id                        String                   @id @default(uuid())
  appelAProjetId            String
  appelAProjet              AppelAProjet             @relation(fields: [appelAProjetId], references: [id], onDelete: Cascade)

  name                      String                   // "Petite subvention" ou "Subvention moyenne"
  amountMin                 Int                      // Montant minimum en FCFA
  amountMax                 Int                      // Montant maximum en FCFA
  durationMaxMonths         Int                      // Durée maximale en mois
  deadlineNoteConceptuelle  DateTime                 // Date limite pour la note conceptuelle

  // Cycle de la subvention (étapes avec dates)
  cycleSteps                CycleStep[]

  createdAt                 DateTime                 @default(now())
  updatedAt                 DateTime                 @updatedAt
}

// Étape du cycle d'une subvention
model CycleStep {
  id                        String                   @id @default(uuid())
  subventionId              String
  subvention                Subvention               @relation(fields: [subventionId], references: [id], onDelete: Cascade)

  step                      String                   // Description de l'étape
  dates                     String                   // Dates de l'étape (format texte)
  ordre                     Int                      // Ordre de l'étape dans le cycle

  createdAt                 DateTime                 @default(now())
  updatedAt                 DateTime                 @updatedAt
}

// Thématique d'un appel à projets
model Thematique {
  id                        String                   @id @default(uuid())
  appelAProjetId            String
  appelAProjet              AppelAProjet             @relation(fields: [appelAProjetId], references: [id], onDelete: Cascade)

  title                     String
  bullets                   String[]                 @default([])
  typeSubvention            String                   // "petite" ou "moyenne"

  createdAt                 DateTime                 @default(now())
  updatedAt                 DateTime                 @updatedAt
}
